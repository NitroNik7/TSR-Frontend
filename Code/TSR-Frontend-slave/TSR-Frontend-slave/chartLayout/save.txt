<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Resizable Panels</title>
    <link rel="stylesheet" href="index.css">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
</head>

<body>
    <button id="fullScreenChart" class="full_screen_chart" onclick="launchFullScreenChart()">
        <i class="material-icons">fullscreen</i>
    </button>

    <div id="chartPanel" class="chart_panel">
        <div id="chartTopLayout" class="chart_top_layout">
            <div id="chartTopLayoutLeft" class="chart_top_layout_left"></div>
            <div id="chartTopCenterDivider" class="chart_top_center_divider">
                <button id="chartTopRightCollapseBtn" class="chart_top_right_collapse_btn" onclick="collapseChartTopRight()">></button>
            </div>
            <div id="chartTopLayoutRight" class="chart_top_layout_right"></div>
        </div>
        <div id="chartMiddleDivider" class="chart_middle_divider">
            <button id="chartBottomCollapse" class="chart_bottom_collapse" onclick="collapseChartBottomLayout()">Collapse</button>
        </div>
        <div id="chartBottomLayout" class="chart_bottom_layout">
            <div class="chartBottomContent">
                <p style="padding: 10px;">Lorem ipsum dolor sit amet consectetur adipisicing elit. Sunt distinctio eveniet nam earum, fuga id labore ullam consequuntur repellat cum ea possimus optio ratione quam illo quibusdam? Quos repudiandae quidem quam veniam error sunt architecto adipisci natus reprehenderit. Velit, eligendi est doloremque ducimus assumenda, voluptatem quis magni porro atque, voluptas dolor enim accusamus.</p>
            </div>
        </div>
    </div>

    <script src="index.js"></script>
</body>

</html>










// css
::backdrop {
    background-color: white;
}

.full_screen_chart {
    float: right;
}

.chart_panel {
    height: 90vh;
    width: 100%;
}

.chart_top_layout {
    display: flex;
    width: 100%;
    height: 70%;
}

.chart_top_center_divider {
    width: 10px;
    cursor: col-resize;
    align-content: center;
}

.chart_top_right_collapse_btn {
    position: relative;
    margin-top: 50%;
    z-index: 1;
    font-size: smaller;
}

.chart_top_layout_right {
    position: relative;
    width: 30%;
    background: lightblue;
    min-width: 300px;
    display: flex; /* Make this a flex container for dynamic panels */
    flex-direction: column; /* Align children vertically */
}

.chart_top_layout_left {
    background: lightcoral;
    width: 70%;
    min-width: 300px;
}

/* Added styling for dynamically created resizable panels */
.dynamic-panel {
    background: lightgreen;
    flex: 1; /* Allow it to grow and take up remaining height */
    min-height: 0; /* Prevent overflow */
    resize: vertical;
    overflow: auto;
}

/* Middle div styling */
.chart_middle_divider {
    height: 7px;
    width: 100%;
    cursor: row-resize;
}

.chart_bottom_collapse {
    position: relative;
    z-index: 1;
    font-size: smaller;
    margin-left: 50%;
}

/* Bottom div styling */
.chart_bottom_layout {
    width: 100%;
    background-color: lightgray;
    height: 30%;
    position: relative;
    overflow-y: auto;
}

/* MEDIA QUERY FOR SCREEN WIDTH LESS THAN 600px */
@media only screen and (max-width: 600px) {
    .chart_top_layout {
        flex-direction: column;
        height: 80vh;
        width: 100%;
    }

    .chart_top_layout_left {
        height: 60%;
        width: 100%;
    }

    .chart_top_layout_right {
        height: 40%;
        width: 100%;
    }

    .chart_top_center_divider {
        display: none;
    }
}


// js
const chartPanel = document.getElementById('chartPanel');
const chartTopLayout = document.getElementById('chartTopLayout');
const chartBottomLayout = document.getElementById('chartBottomLayout');
const chartBottomCollapseBtn = document.getElementById('chartBottomCollapse');

function launchFullScreenChart() {
    if (!chartPanel.fullscreenElement) {
        chartPanel.requestFullscreen({ navigationUI: "hide" });
        chartTopLayout.style.height = '70vh';
        chartBottomLayout.style.height = '30vh';
        chartBottomCollapseBtn.style.marginBottom = '3px';
    } else {
        chartPanel.exitFullscreen();
    }
}

// Function to dynamically create panels in chartTopLayoutRight
function createDynamicPanels(data) {
    const chartTopLayoutRight = document.getElementById('chartTopLayoutRight');
    chartTopLayoutRight.innerHTML = ''; // Clear existing panels

    data.forEach(item => {
        const panel = document.createElement('div');
        panel.classList.add('dynamic-panel');
        panel.innerHTML = item; // Set panel content from data
        chartTopLayoutRight.appendChild(panel);
    });
}

// Example API response data
const apiResponseData = ['Panel 1', 'Panel 2', 'Panel 3']; // Replace with actual API call
createDynamicPanels(apiResponseData);

// For collapsing and resizing bottom div
const chartMiddleDivider = document.getElementById('chartMiddleDivider');
let yCord;

chartMiddleDivider.addEventListener('mousedown', (e) => {
    yCord = e.clientY; // yCord stores Y coordinate value when mouse is initially clicked

    document.addEventListener('mousemove', mouseMoveHandlerMiddleDivider);
    document.addEventListener('mouseup', mouseUpHandlerMiddleDivider);
});

const mouseMoveHandlerMiddleDivider = (e) => {
    let dy = yCord - e.clientY; // dy < 0, when cursor is moved down, dy > 0 when cursor is moved up
    chartTopLayout.style.transition = 'none';
    chartBottomLayout.style.transition = 'none';
    chartTopLayout.style.height = (chartTopLayout.offsetHeight - dy) + 'px';
    chartBottomLayout.style.height = (chartPanel.offsetHeight - chartTopLayout.offsetHeight) + 'px';
    yCord = e.clientY;
}

const mouseUpHandlerMiddleDivider = () => {
    document.removeEventListener('mousemove', mouseMoveHandlerMiddleDivider);
    document.removeEventListener('mouseup', mouseUpHandlerMiddleDivider);
}

// For collapsing bottom div
let prevHeight = chartBottomLayout.offsetHeight;
function collapseChartBottomLayout() {
    if (chartBottomLayout.offsetHeight == 0) {
        chartTopLayout.style.transition = 'height 0.2s ease';
        chartBottomLayout.style.transition = 'height 0.2s ease';
        chartTopLayout.style.height = (chartPanel.offsetHeight - prevHeight) + 'px';
        chartBottomLayout.style.height = prevHeight + 'px';
    } else {
        chartTopLayout.style.transition = 'height 0.2s ease';
        chartBottomLayout.style.transition = 'height 0.2s ease';
        prevHeight = chartBottomLayout.offsetHeight;
        chartBottomLayout.style.height = '0px';
        chartTopLayout.style.height = (chartTopLayout.offsetHeight + prevHeight - 15) + 'px';
    }
}

const chartCentreDivider = document.getElementById('chartTopCenterDivider');
let xCord;

const chartTopLayoutRight = document.getElementById('chartTopLayoutRight');
const chartTopLayoutLeft = document.getElementById('chartTopLayoutLeft');

let initialLeftWidth = chartTopLayoutLeft.offsetWidth;

chartCentreDivider.addEventListener('mousedown', (e) => {
    xCord = e.clientX;

    document.addEventListener('mousemove', mouseMoveHandlerCentreDivider);
    document.addEventListener('mouseup', mouseUpHandlerCentreDivider);
});

const mouseMoveHandlerCentreDivider = (e) => {
    let dx = xCord - e.clientX;
    chartTopLayoutLeft.style.transition = 'none';
    chartTopLayoutRight.style.transition = 'none';
    chartTopLayoutLeft.style.width = (initialLeftWidth - dx) + 'px';
    chartTopLayoutRight.style.width = (chartTopLayout.offsetWidth - chartTopLayoutLeft.offsetWidth) + 'px';
}

const mouseUpHandlerCentreDivider = () => {
    document.removeEventListener('mousemove', mouseMoveHandlerCentreDivider);
    document.removeEventListener('mouseup', mouseUpHandlerCentreDivider);
}

// For collapsing chartTopRight div
let chartTopRightCollapseBtn = document.getElementById('chartTopRightCollapseBtn');
let prevWidth = chartTopLayoutRight.offsetWidth;
function collapseChartTopRight() {
    if (chartTopLayoutRight.offsetWidth == 0) {
        chartTopLayoutLeft.style.transition = 'width 0.2s ease';
        chartTopLayoutRight.style.transition = 'width 0.2s ease';
        chartTopLayoutLeft.style.width = (chartTopLayout.offsetWidth - prevWidth) + 'px';
        chartTopLayoutRight.style.width = prevWidth + 'px';
        chartTopLayoutRight.style.minWidth = '300px';
        chartTopRightCollapseBtn.innerText = '>';
    } else {
        chartTopLayoutLeft.style.transition = 'width 0.2s ease';
        chartTopLayoutRight.style.transition = 'width 0.2s ease';
        prevWidth = chartTopLayoutRight.offsetWidth;
        chartTopLayoutRight.style.minWidth = '0px';
        chartTopLayoutRight.style.width = '0px';
        chartTopLayoutLeft.style.width = (chartTopLayoutLeft.offsetWidth + prevWidth) + 'px';
        chartTopRightCollapseBtn.innerText = '<';
    }
}

window.onresize = (e) => {
    chartTopLayoutLeft.style.transition = 'none';
    chartTopLayoutLeft.style.width = (chartTopLayout.offsetWidth - chartTopLayoutRight.offsetWidth) + 'px';
}
